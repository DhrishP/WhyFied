// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum ModelName {
  Krishna
  Marcus
  Albert
  Ayn
  Nietzsche
  Epictetus
  Seneca
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  coins                 Int                    @default(0)
  dailyStreak           Int                    @default(0)
  createdAt             DateTime               @default(now())
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Achievement           Achievement[]
  JournalEntries        JournalEntries[]
  SmallWin              SmallWin[]
  Preferences           Preferences[]
  Questions             Question[]
  difficulty            String                 @default("easy")
  UserModels            UserModels[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Question {
  id             String           @id @default(cuid())
  question       String
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  difficulty     String
  modelId        String
  model          Model            @relation(fields: [modelId], references: [id])
  JournalEntries JournalEntries[]
}

model registeredEmail {
  id    String @id @default(cuid())
  email String @unique
}

model Achievement {
  id       String  @id @default(cuid())
  title    String
  ImageUrl String?
  points   Int
  user     User    @relation(fields: [userId], references: [id])
  userId   String
}

model Model {
  id         String       @id @default(cuid())
  name       ModelName
  Questions  Question[]
  UserModels UserModels[]
}

model JournalEntries {
  id         String   @id @default(cuid())
  answer     String
  date       DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  userId     String

  @@unique([questionId, userId])
}

model SmallWin {
  id     String   @id @default(cuid())
  win    String
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id])
  userId String
}

model Preferences {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  genre  String

  @@unique([genre, userId])
}

model UserModels {
  userId  String
  modelId String
  user    User   @relation(fields: [userId], references: [id])
  model   Model  @relation(fields: [modelId], references: [id])

  @@id([userId, modelId])
}
