generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  coins                 Int                    @default(0)
  createdAt             DateTime               @default(now())
  isTwoFactorEnabled    Boolean                @default(false)
  Streak                Int                    @default(0)
  accounts              Account[]
  Achievement           Achievement[]
  JournalEntries        JournalEntries[]
  Preferences           Preferences[]
  Questions             Question[]
  SmallWin              SmallWin[]
  twoFactorConfirmation TwoFactorConfirmation?
  UserModels            UserModels[]
  UserQuestion          UserQuestion[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id             String           @id @default(cuid())
  question       String
  userId         String
  difficulty     String
  modelId        String
  JournalEntries JournalEntries[]
  model          Model            @relation(fields: [modelId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
}

model registeredEmail {
  id    String @id @default(cuid())
  email String @unique
}

model Achievement {
  id       String  @id @default(cuid())
  title    String
  ImageUrl String?
  points   Int
  userId   String
  user     User    @relation(fields: [userId], references: [id])
}

model Model {
  id           String        @id @default(cuid())
  name         ModelName
  description  String
  ImageUrl     String
  searchPrompt String?
  Questions    Question[]
  UserModels   UserModels[]
  getQuestion  getQuestion[]
}

model JournalEntries {
  id         String   @id @default(cuid())
  answer     String
  date       DateTime @default(now())
  questionId String
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([questionId, userId])
}

model SmallWin {
  id     String   @id @default(cuid())
  win    String
  date   DateTime @default(now())
  userId String
  user   User     @relation(fields: [userId], references: [id])
}

model Preferences {
  id         String @id @default(cuid())
  userId     String @unique
  difficulty String @default("easy")
  type       Types  @default(earnest)
  user       User   @relation(fields: [userId], references: [id])

  @@unique([type, userId])
}

model UserModels {
  userId  String
  modelId String
  model   Model  @relation(fields: [modelId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@id([userId, modelId])
}

model getQuestion {
  id           String         @id @default(cuid())
  question     String
  difficulty   String
  type         Types          
  modelId      String
  UserQuestion UserQuestion[]
  model        Model          @relation(fields: [modelId], references: [id])
}

model UserQuestion {
  userId      String
  questionId  String
  getQuestion getQuestion @relation(fields: [questionId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@id([userId, questionId])
}

enum UserRole {
  ADMIN
  USER
}
enum Difficulty {
  easy
  intermediate
  hardcore
}

enum Types {
  earnest
  facetious
}

enum ModelName {
  General
  Krishna
  Marcus
  Albert
  Ayn
  Nietzsche
  Epictetus
  Seneca
}
